{"version":3,"sources":["styles.module.css","useWebcam.js","useModel.js","useBoxRenderer.js","index.js"],"names":["module","exports","fixed","useWebcam","videoRef","_useState","useState","_useState2","Object","slicedToArray","webcamLoaded","setWebcamLoaded","useEffect","navigator","mediaDevices","getUserMedia","audio","video","facingMode","then","stream","current","srcObject","onloadedmetadata","useModel","modelPath","model","setModel","models","load","getLabelText","prediction","scoreText","score","toFixed","class","renderPredictions","predictions","canvasRef","elapsedStr","ctx","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","textHeight","parseInt","fillRect","fillText","detectFrame","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","start","end","wrap","_context","prev","next","performance","now","detect","sent","toPrecision","requestAnimationFrame","stop","_x","_x2","_x3","apply","this","arguments","nonDetectFrame","_ref2","_callee2","_context2","_x4","_x5","useBoxRenderer","shouldRender","App","useRef","cameraLoaded","process","react_default","createElement","Fragment","className","styles","autoPlay","playsInline","muted","ref","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6d15f44b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"fixed\":\"styles_fixed__1Xq6p\"};","import { useEffect, useState } from 'react'\n\nconst useWebcam = videoRef => {\n  const [webcamLoaded, setWebcamLoaded] = useState(false)\n  useEffect(() => {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: 'user'\n          }\n        })\n        .then(stream => {\n          // window.stream = stream\n          videoRef.current.srcObject = stream\n          videoRef.current.onloadedmetadata = () => {\n            setWebcamLoaded(true)\n          }\n        })\n    }\n  }, [videoRef])\n  return webcamLoaded\n}\n\nexport default useWebcam\n","import { useEffect, useState } from \"react\";\n\nimport models from \"@cloud-annotations/models\";\n\nconst useModel = modelPath => {\n  const [model, setModel] = useState();\n  useEffect(() => {\n    models.load(modelPath).then(model => {\n      setModel(model);\n    });\n  }, [modelPath]);\n  return model;\n};\n\nexport default useModel;\n","import { useEffect } from \"react\";\n\nconst SCORE_DIGITS = 4;\n\nconst getLabelText = prediction => {\n  const scoreText = prediction.score.toFixed(SCORE_DIGITS);\n  return prediction.class + \", score: \" + scoreText;\n};\n\nconst renderPredictions = (predictions, canvasRef, elapsedStr) => {\n  const ctx = canvasRef.current.getContext(\"2d\");\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  // Font options.\n  const font = \"16px sans-serif\";\n  ctx.font = font;\n  ctx.textBaseline = \"top\";\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0];\n    const y = prediction.bbox[1];\n    const width = prediction.bbox[2];\n    const height = prediction.bbox[3];\n    // Draw the bounding box.\n    ctx.strokeStyle = \"#00FFFF\";\n    ctx.lineWidth = 4;\n    ctx.strokeRect(x, y, width, height);\n    // Draw the label background.\n    ctx.fillStyle = \"#00FFFF\";\n    const textWidth = ctx.measureText(getLabelText(prediction)).width;\n    const textHeight = parseInt(font, 10); // base 10\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n  });\n\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0];\n    const y = prediction.bbox[1];\n    // Draw the text last to ensure it's on top.\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(getLabelText(prediction), x, y);\n  });\n  \n  ctx.font = \"32px sans-serif\";\n  ctx.textBaseline = \"top\";\n  \n  ctx.fillStyle = \"#FFFFFF\";\n  ctx.fillText('Prediction Time:' + elapsedStr + 'ms', 10, 10);\n};\n\nconst detectFrame = async (model, videoRef, canvasRef) => {\n  const start = performance.now();\n  const predictions = await model.detect(videoRef.current);\n  const end = performance.now();\n  \n  const elapsed = (end - start);\n  const elapsedStr = elapsed.toPrecision(3);\n  \n  renderPredictions(predictions, canvasRef, elapsedStr);\n  requestAnimationFrame(() => {\n    detectFrame(model, videoRef, canvasRef);\n  });\n};\nconst nonDetectFrame = async (videoRef, canvasRef) => {\n  const ctx = canvasRef.current.getContext(\"2d\");\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.font = \"32px sans-serif\";\n  ctx.textBaseline = \"top\";\n  \n  ctx.fillStyle = \"#FFFFFF\";\n  ctx.fillText('Model Loading...', 10, 10);\n};\n\nconst useBoxRenderer = (model, videoRef, canvasRef, shouldRender) => {\n  useEffect(() => {\n    if (model && shouldRender) {\n      detectFrame(model, videoRef, canvasRef);\n    } else {\n      nonDetectFrame(videoRef, canvasRef);\n    }\n  }, [canvasRef, model, shouldRender, videoRef]);\n};\n\nexport default useBoxRenderer;\n","import React, { useRef } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport useWebcam from './useWebcam'\nimport useModel from './useModel'\nimport useBoxRenderer from './useBoxRenderer'\n\nimport styles from './styles.module.css'\n\nconst MODEL_PATH = process.env.PUBLIC_URL + '/model_web'\n\nconst App = () => {\n  const videoRef = useRef()\n  const canvasRef = useRef()\n\n  const cameraLoaded = useWebcam(videoRef)\n  const model = useModel(MODEL_PATH)\n  useBoxRenderer(model, videoRef, canvasRef, cameraLoaded)\n\n  return (\n    <>\n      <video\n        className={styles.fixed}\n        autoPlay\n        playsInline\n        muted\n        ref={videoRef}\n        width=\"640\"\n        height=\"480\"\n      />\n      <canvas\n        className={styles.fixed}\n        ref={canvasRef}\n        width=\"640\"\n        height=\"480\"\n      />\n    </>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}